// Code generated by meshRPC. DO NOT EDIT.
// All changes must be done in custom client that should either embed or wrap this.

package {{.PackageName}}

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/pkg/errors"
)

type {{.FeaturePrefix}}ServiceClient interface {
	{{.FeaturePrefix}}Service
	{{.JsonClientInterfaceBody}}
}

type {{.FeaturePrefix}}ServiceClientOptions struct {
}

func check{{.FeaturePrefix}}ServiceClientOptions(opt *{{.FeaturePrefix}}ServiceClientOptions) *{{.FeaturePrefix}}ServiceClientOptions {
	if opt == nil {
		opt = &{{.FeaturePrefix}}ServiceClientOptions{}
	}
	return opt
}

type {{.FeaturePrefix}}HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

func New{{.FeaturePrefix}}ServiceClient(
	httpClient {{.FeaturePrefix}}HTTPClient,
	opt *{{.FeaturePrefix}}ServiceClientOptions,
) {{.FeaturePrefix}}ServiceClient {
	return &{{.RPCClientPrivateName}}{
		opt: check{{.FeaturePrefix}}ServiceClientOptions(opt),
		httpClient: httpClient,
	}
}

type {{.RPCClientPrivateName}} struct {
	opt  *{{.FeaturePrefix}}ServiceClientOptions
	httpClient {{.FeaturePrefix}}HTTPClient
}

{{.JsonClientImplementationBody}}

func (_client *{{.RPCClientPrivateName}}) do(req *http.Request) ([]byte, error) {
	resp, err := _client.httpClient.Do(req)
	if err != nil {
		err = errors.Errorf("{{.RPCClientPrivateName}}: %v", err)
		return nil, err
	}
	respBody, _ := ioutil.ReadAll(resp.Body)
	_ = resp.Body.Close()
	if resp.StatusCode < 200 || resp.StatusCode > 299 {
		if len(respBody) > 0 {
			err := errors.Errorf("service error %d: %s", resp.StatusCode, string(respBody))
			return nil, err
		}
		err := errors.Errorf("service error %d: %s", resp.StatusCode, resp.Status)
		return nil, err
	}
	return respBody, nil
}

func (_client *{{.RPCClientPrivateName}}) newJsonReq(method string, fnName string, v interface{}) *http.Request {
	data, _ := json.Marshal(v)
	req, _ := http.NewRequest(method, fnName, bytes.NewReader(data))
	return req
}
