// Code generated by go-bindata.
// sources:
// templates/client_rpc_go.tpl
// templates/data_go.tpl
// templates/handler_go.tpl
// templates/handler_rpc_go.tpl
// templates/service_go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClient_rpc_goTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\x16\x3f\xc5\x55\x40\x02\xa9\x10\xa4\x3d\x1b\xf0\x80\x2e\x49\xb1\x62\x58\x12\xa4\xde\xd3\x30\x14\xb4\x74\x92\xb8\x52\xa4\x4c\x52\x4e\x0d\x41\xdf\x7d\x38\x52\xfe\xd3\xcd\x6d\x1c\xac\x2f\x89\x78\xc7\xfb\xf3\xbb\xfb\xdd\xd1\x45\x01\x37\xba\x42\x68\x50\xa1\xe1\x0e\x2b\x58\xef\xa0\xe1\x92\x7f\xd9\xe5\x70\xfb\x00\xf7\x0f\x2b\xb8\xbb\xfd\xb0\xca\x59\x51\xc0\x3b\x29\xa1\x6c\xb9\x6a\xd0\x42\x37\x58\x07\x6b\x84\x4a\x2b\x04\xa1\xa0\x1c\xac\xd3\x1d\x94\x52\xa0\x72\xe0\x5a\xee\xc0\xb6\x7a\x90\x15\xa0\x70\x2d\x1a\xc0\x6e\x8d\x15\x68\x03\xcf\x86\xf7\xe0\x5a\x61\x73\xc6\x7a\x5e\x7e\xe6\x0d\xc2\x38\xe6\x8f\xe1\xf3\x9e\x77\x38\x4d\x8c\x89\xae\xd7\xc6\x41\xc2\xa2\x78\xbd\x73\x68\x63\x16\xc5\xa8\x4a\x5d\x09\xd5\x14\x7f\x5b\xad\xbc\xc0\x18\x6d\xbc\xaa\xee\x1c\xfd\x13\xba\x10\x7a\x70\x42\xd2\x41\xa1\x2b\x5a\xe7\xfa\x98\x45\x52\x37\x10\x37\xc2\xb5\xc3\x3a\x2f\x75\x57\x58\x61\x86\xde\xa2\x2a\xa4\x6e\xcc\x60\x63\xc6\xa2\x53\x35\xb7\xce\x70\x32\x0f\x95\x28\x3a\x74\x46\x94\x36\x66\x29\x63\x6e\xd7\xfb\x7c\xdf\x23\x77\x83\xc1\x47\x83\xb5\xf8\x32\x4d\x1f\xd1\x6c\x45\x89\x37\x01\xbf\x50\x0e\x4d\xcd\x4b\x84\x91\x45\xdf\xbc\xec\x55\xc1\xe2\xc3\xde\xe0\x17\x5d\xed\xa6\x89\x4d\x97\x05\x7a\xe8\x9d\xd0\xca\x82\x75\x66\x28\x1d\x8c\x64\x57\x0f\xaa\x84\xb2\xc5\xf2\xf3\x65\xc6\x89\xee\x1d\xbc\xbd\xec\x6e\x7a\xe9\x45\xc2\x2d\x6a\x20\xd7\xcb\x25\x28\x21\x49\x10\xf9\x23\x5c\x5f\xe6\x62\x9c\x58\x34\xb1\xc8\xa0\x1b\x8c\x22\x4f\xdf\x29\xca\xaf\xab\xd5\xe3\xb9\xd2\xdf\xea\xc4\xe0\x06\xde\x12\x0d\xf2\x27\xdc\x0c\x68\x5d\x0a\xc9\xfe\x6c\x7b\xad\x2c\x66\xe0\x79\x94\x1e\x8a\x77\x8f\xcf\x2f\xa4\x98\xb0\xa8\x94\xe2\xbb\x89\x64\x2c\x7a\x45\x61\x33\x96\xbe\x48\xaa\xf1\x50\x8c\xeb\x03\x6f\x1e\x8d\xd8\x72\x37\x4f\xcd\x5c\xe2\xc5\x6b\xbb\x9f\x66\x2c\x8a\x1c\x6f\xec\x02\x66\xa6\xe7\x2b\xde\x58\x72\x17\xc5\x92\xef\xd0\xc4\x0b\x00\x88\x6d\xb0\xff\x14\x86\x3c\xce\xbc\x7e\x16\xc6\x0b\x88\xc7\x31\x9f\x43\x84\x7c\xfc\x8d\x89\xfe\xd4\x02\x65\x65\x17\x20\x75\x93\xbf\xf7\xdf\x3f\xcc\x39\x8b\xa8\x15\x0b\xda\x3c\x19\x11\xe6\x84\x24\x67\x4a\x74\x9c\x14\x0f\xf8\x2b\xbc\x6c\x4e\xf3\x24\xcb\xd0\xc3\x4b\x9b\xc8\x5e\x66\x05\xa5\x77\x1c\xfa\xae\x97\xd8\xa1\x72\x9c\xcc\xe7\xc9\x0f\x14\x4c\xac\x0f\x7a\x06\x41\x0a\xd5\x79\x52\xff\xf9\x17\x2d\xca\x3d\x99\x03\x5b\x6c\xef\xcf\xb0\x58\x82\xcd\x4b\x29\xf2\x30\x10\xa9\x1f\x4e\x52\xbc\x39\x0e\x27\x1d\x97\x50\x77\x2e\xbf\x23\x0f\x75\x12\x9f\x4f\x60\x01\x57\xdb\xd8\xbb\x4d\x59\xb4\x67\xa4\x12\xd2\x8b\xe6\x91\xb5\x3d\xa1\xc9\xe0\x13\x45\x0e\x1b\x39\x7f\x42\x5e\xbd\x93\x32\x21\x6d\x4e\xea\x34\xdc\xf4\xdf\xf9\x8d\xd4\x16\x93\x90\x98\x97\x7e\x74\xdc\x0d\xd6\x3f\x4e\x6f\x96\xe0\xb1\x06\xd1\xc3\x6f\x3e\x5d\x51\x83\x44\x95\xec\x63\xa5\xf0\x33\xfc\xe4\x15\xd1\x0c\xf8\x14\xc9\xcc\xa3\x50\x1b\xb8\xaa\x16\x70\x65\xe3\xec\xdf\x81\x32\x62\x87\x50\xcd\xd1\x29\x21\xfc\x2f\x44\xc2\xf8\x7f\xa2\x9c\x08\xbe\x5d\x42\x2f\x3b\x56\x52\x09\xc9\x2e\x21\x87\xc2\xe7\x27\xdc\x24\x1d\xba\x56\x57\x33\x9e\x0c\x6a\x45\xfa\xc3\x71\x7b\xdc\x92\xe3\x94\x7e\xcd\x24\xaa\x61\xc5\x1d\x9f\x9b\x47\x4f\x6d\xfe\x3b\x37\xb6\xe5\x32\xd9\xfa\x96\x6d\x66\x95\xb7\xba\xf7\xf1\xc8\x70\x8e\xb9\x0f\x96\x81\x7f\xb7\xc3\x05\x5e\xa1\x49\xc8\x6b\x9a\x9e\x60\xdb\x5c\x84\xc8\x2f\x33\xda\xd5\x77\xc6\xf8\xce\x40\x60\x7a\x3a\xd7\x79\x64\xd1\x96\x1b\x38\xf7\x2c\xf8\xc6\xec\xd7\x3c\x8b\x3c\x96\x3f\x54\x37\xa3\x09\xe3\x71\x8d\x81\x74\x44\x26\x0c\xad\x4c\xe9\xcd\x0a\x64\x3a\xf6\xe6\xb4\x2d\xe1\x77\x07\x41\x3b\x98\xb0\x89\xfd\x13\x00\x00\xff\xff\x18\xe2\x9d\x44\x4c\x09\x00\x00")

func templatesClient_rpc_goTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesClient_rpc_goTpl,
		"templates/client_rpc_go.tpl",
	)
}

func templatesClient_rpc_goTpl() (*asset, error) {
	bytes, err := templatesClient_rpc_goTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client_rpc_go.tpl", size: 2380, mode: os.FileMode(420), modTime: time.Unix(1543443525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesData_goTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xc1\x6e\xdc\x20\x10\x3d\x33\x5f\x31\xf2\xa1\xb2\x23\xc7\x7b\xb7\x94\x53\xda\x3d\xa6\x51\x9b\x1f\x20\xec\xd8\x41\xc1\xd8\x02\x9c\x26\x42\xfc\x7b\x35\x78\xeb\x6c\xba\xda\xec\x56\xbd\x58\x30\x7e\x33\xbc\xc7\x7b\x4c\x52\x3d\xcb\x9e\x30\xc6\xe6\x7e\x59\xde\xc9\x81\x52\x02\xd0\xc3\x34\xba\x80\x25\x08\x25\xd5\x13\x61\xd1\xeb\xf0\x34\x3f\x36\x6a\x1c\x36\x93\x0c\x4e\xab\xe7\xc1\x6e\xfa\xf1\x3a\xff\x2e\x40\x98\xb1\xff\x00\xf2\xda\xcd\x93\x27\xbb\x31\x63\xef\x66\x5f\x00\x88\xc3\xdf\xd2\x07\x27\x2d\x85\x4d\x2f\x8d\x7c\x7d\xdb\xec\x64\x90\xc5\xe7\x90\x81\xf8\x58\x5f\x40\x05\x10\xde\xa6\xcc\x7a\x4b\x32\xcc\x8e\xee\x1d\x75\xfa\x35\xa5\xaf\x32\xc8\x1f\x34\x8d\xa8\x6d\x20\xd7\x49\x45\x18\x41\xf0\xec\x86\xcb\x10\x23\xea\x0e\x9b\x6f\xaf\x72\x98\x0c\x6d\x67\xab\x58\x2f\xa6\x04\x22\xc6\xbf\xcb\x29\x95\x15\x92\x73\xa3\x83\x18\xaf\x91\xec\x2e\x25\x48\x67\xcf\xfe\x3e\x05\x3d\x5a\x8f\x3e\xb8\x59\x05\x8c\xdc\xd2\xcd\x56\xa1\x7a\x22\xf5\x7c\xb6\xaf\x1c\xa7\x80\x57\x67\x61\xd5\x05\x18\xd6\xae\x3b\xe4\x81\x37\x37\x68\xb5\xe1\x82\xc8\x5b\xfc\x72\xb6\x3b\x26\x10\x09\x84\xa3\x30\x3b\xcb\x43\x56\x21\x77\xf4\xeb\x74\x77\x09\xa2\x37\xe3\xa3\x34\xd9\x87\xf5\xea\xeb\xc5\x86\xdb\x1c\xa6\xab\x1c\x9a\x26\x6f\x6a\x10\x97\x29\xae\xa1\xfa\xcc\xf1\xb8\x52\x65\x69\x5c\xba\x77\xfa\x45\x86\x7d\xa2\x59\x39\x17\x5b\x7c\x67\x57\xc3\x72\x1d\xed\x3f\x58\x53\xd5\x20\x44\x90\xbd\x6f\x71\x9f\xc7\xe6\x41\xf6\x9e\xc7\x8b\xc2\xc8\x37\x72\x45\x8b\x88\x45\xce\x73\x9d\xab\x9e\xdc\x8b\x56\x54\xb4\x58\xc4\xd8\xfc\x5c\x76\x0b\xab\x8c\x48\xfc\xe9\x34\x99\x9d\x6f\xd1\x8c\x7d\xb3\xcd\xeb\xff\x1a\xc9\xca\xd6\xfb\x6e\x71\x5d\xd6\xec\xe9\x41\x86\x8f\xee\xe9\x3d\xb6\x07\xcf\x06\xb2\xe2\x0f\x82\x61\xcf\xf8\x80\xf0\x62\xe4\x05\x4e\xc2\xa9\x2c\x30\xb3\xd3\x4f\x34\x67\xaf\x74\xf9\x80\x23\xde\x39\x1b\x27\x1f\x30\xcb\xf9\xc3\x9e\x5b\x5d\x60\xcc\xad\x34\xa6\x74\x0d\x6b\xab\x40\xf8\x20\x83\xdf\x5a\x6c\x6f\xf0\x18\xfa\xa0\x07\x6d\xfb\x77\xf0\x8e\x3a\x72\xb8\x6f\x29\x2b\x58\xc3\x67\xb5\x81\xc4\x22\xc8\xee\x30\xa5\xdf\x01\x00\x00\xff\xff\x20\x11\x16\xca\x61\x05\x00\x00")

func templatesData_goTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesData_goTpl,
		"templates/data_go.tpl",
	)
}

func templatesData_goTpl() (*asset, error) {
	bytes, err := templatesData_goTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/data_go.tpl", size: 1377, mode: os.FileMode(420), modTime: time.Unix(1543443656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHandler_goTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4d\x6b\xe3\x3a\x14\x5d\xeb\xfe\x8a\xfb\x04\xef\x61\x97\x54\xdd\x07\xb2\x2a\x0d\x6f\x60\xe8\x94\x49\xa1\x6b\x55\xb9\x96\x45\x1d\xd9\x48\x72\x26\x41\xf8\xbf\x0f\x92\x9d\x7e\x4d\x3e\x0a\xb3\x89\x65\xe5\x9c\xeb\x73\xee\x57\x27\xd5\x8b\xd4\x84\x31\x8a\x87\xf1\x78\x2f\x37\x34\x0c\x00\x66\xd3\xb5\x2e\x60\x01\x8c\x5b\x0a\x37\x75\x08\x1d\x07\x60\x5c\x9b\x50\xf7\xcf\x42\xb5\x9b\x1b\x6d\xec\xb5\x6e\xad\x51\xe9\xc4\x81\x3d\xf7\xda\x5b\xa9\xf1\x3d\x66\xba\x3b\x3c\xaf\x75\xcb\x81\x35\xed\x47\x90\x37\xae\xef\x3c\xd9\x9b\xa6\xd5\xae\xf7\x9f\xbf\x23\x7d\x70\x32\x89\xd0\xb2\x91\xbb\x7d\x42\x69\x63\x35\x3f\x8f\xda\x50\x70\x46\x79\x0e\x25\x40\xd8\x77\xd9\xe3\x92\x64\xe8\x1d\x3d\x38\xaa\xcc\x6e\x18\xfe\x97\x76\xdd\x90\x43\x63\x03\xb9\x4a\x2a\xc2\x08\x31\xa2\xa9\x50\xdc\xed\xe4\xa6\x6b\x68\xd9\x5b\x95\x32\x82\xc3\x00\x2c\xc6\xcf\xd7\xc3\x50\x28\xbc\xd2\xc6\x8a\xdb\xd6\x06\xda\x85\x32\xf1\xc9\xae\x13\x7e\x00\xd8\x4a\x77\xfa\xb3\xab\x8e\xd4\x19\x51\x0b\xfc\x2f\x46\x31\xbd\x3d\x38\xb3\x95\x61\x2a\x4e\x1c\x2e\x39\xfa\xd1\x05\xd3\x5a\x8f\x3e\xb8\x5e\x05\x8c\x49\x4b\xd5\x5b\x85\xaa\x26\xf5\x72\x89\x56\xb4\x5d\xc0\xab\x4b\xa8\xf2\x32\x04\x23\x30\x53\x61\x0a\xb7\x58\xa0\x35\x4d\xba\x60\xf9\x35\x9b\x3b\x4b\x8e\x03\xb0\x01\x98\xa3\xd0\x3b\x9b\x62\xbc\x9a\xb8\xa7\x5f\x27\xc9\x05\x30\xbf\x3d\x96\xd6\x15\xb9\xad\x51\x34\x03\xf6\x25\x77\x33\x28\xcf\xd4\x26\xbe\xea\x3a\x59\xa3\xd1\xe8\xfc\xeb\x19\x2f\x67\xc0\x58\x90\xda\xcf\x71\x6a\x5d\xf1\x28\xb5\x4f\x81\x18\x6f\xe4\x9e\x1c\x9f\x23\x22\xaf\x47\x26\x9f\xe5\x3f\xfc\x68\x8b\xcf\x91\xc7\x28\x26\x93\xa3\x84\x8c\x18\xd2\x4f\x65\xa8\x59\xfb\x39\x36\xad\x16\xcb\x7c\xfe\xdb\xa8\x00\x2c\xe5\x39\x51\x11\xfd\x56\xcd\x52\xad\xde\xb5\xe5\xb1\x94\xbc\x75\x63\x2e\xd1\xe9\x1a\x41\x4e\xc3\x87\x2c\xc0\xe4\xe1\x9d\x85\xb1\x90\x97\x2b\x99\x64\x9d\x1e\xea\xdc\x50\x45\x9d\xc3\x1c\x15\x9d\xdb\xe0\xe2\xd8\x27\x53\x07\xbd\x3f\x29\x6d\xce\x84\xbd\x95\x4d\x53\xd4\x22\xb9\x29\x81\x55\xf6\x7b\xab\x71\xbe\xc8\x1e\x9e\x4c\xa8\x47\x1f\xc5\xb4\xce\xc6\x2b\x5b\xd4\x62\xb4\x5a\x96\xc0\x7c\x90\xc1\x2f\x6d\x22\xfd\x19\xfd\xd1\x6c\x8c\xd5\x6f\xf1\xd7\x54\x91\xc3\x89\x52\x94\x00\x8c\x9c\x4b\xd4\x5a\xf8\xad\x12\x47\x6d\x94\x79\x40\x13\xee\x9f\xb7\x01\xcd\x42\xc5\x93\x74\xb6\x20\xe7\x4a\x60\x87\xcd\x2e\xee\xdb\x60\xaa\xfd\xe1\x56\x89\x55\x70\x59\x42\x08\x9d\x58\x05\x19\x7a\xff\x2d\xad\x52\x2b\x9b\x54\x4a\x72\x77\xce\xb5\x6e\x86\x9c\xd2\x73\x8e\xff\x6e\xf9\x0c\x27\xf2\x38\x3f\x63\xdb\xbc\xee\xcc\xdf\x01\x00\x00\xff\xff\xfb\xc8\x42\x6f\x8f\x06\x00\x00")

func templatesHandler_goTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHandler_goTpl,
		"templates/handler_go.tpl",
	)
}

func templatesHandler_goTpl() (*asset, error) {
	bytes, err := templatesHandler_goTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/handler_go.tpl", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1543443574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHandler_rpc_goTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x4f\xe3\x3c\x10\x3e\x7b\x7e\xc5\xc8\x87\x57\xed\xab\x6e\x72\x8f\xc4\x61\x97\x0f\x2d\x17\xa8\x80\xfb\xe2\x3a\x53\xc7\x4b\x62\x47\xf6\xa4\x50\x45\xf9\xef\x2b\xa7\x01\x5a\x09\x4a\x57\xda\x4b\x6b\xcf\xc7\x33\xf3\xcc\x33\x4e\x9e\xe3\xb9\x2f\x09\x0d\x39\x0a\x8a\xa9\xc4\xd5\x16\x8d\xaa\xd5\xcb\x36\xc3\x8b\x5b\xbc\xb9\x7d\xc0\xcb\x8b\xeb\x87\x0c\xf2\x1c\xbf\xd7\x35\xea\x4a\x39\x43\x11\x9b\x2e\x32\xae\x08\x4b\xef\x08\xad\x43\xdd\x45\xf6\x0d\xea\xda\x92\x63\xe4\x4a\x31\xc6\xca\x77\x75\x89\x64\xb9\xa2\x80\xd4\xac\xa8\x44\x1f\xf0\x39\xa8\x16\xb9\xb2\x31\x03\x68\x95\x7e\x52\x86\xb0\xef\xb3\xe5\xee\x78\xa3\x1a\x1a\x06\x00\xdb\xb4\x3e\x30\xce\x40\x48\x72\xda\x97\xd6\x99\xfc\x77\xf4\x4e\x82\x90\x8e\x38\xaf\x98\x5b\x09\x20\x56\x9d\x89\x4e\x19\x94\xc6\x72\xd5\xad\x32\xed\x9b\x7c\xb2\xbd\xfe\x7f\x33\x5e\x82\xa8\xfd\x61\x50\xb4\xa1\x6b\x23\xb9\xbc\xf6\x26\x74\x31\x61\xed\xbb\x55\xe4\xa0\x52\xa1\xdd\x30\x52\x94\xb1\xce\xc8\xe3\x51\x0d\x71\xb0\x3a\x4a\x98\x03\xf0\xb6\x1d\x89\x5d\x91\xe2\x2e\xd0\x32\xd0\xda\xbe\x0c\xc3\xdd\xf2\xfc\xa7\x72\x65\x4d\x01\xad\x63\x0a\x6b\xa5\x09\x7b\xe8\xfb\xec\xdd\x73\xfd\xea\xf8\xe1\xcb\xed\x30\xc0\x00\xb0\x51\xe1\x28\xd8\x7d\x4b\xfa\x78\xb5\x33\xfc\xef\xa0\xc8\x32\xd8\x8d\xe2\x69\xe0\xfd\x70\x42\xc3\xb7\x2d\x5b\xef\x22\x46\x0e\x9d\x66\xec\x53\x5f\xeb\xce\x69\xd4\x15\xe9\xa7\x13\x32\x67\xbe\x65\xfc\xff\x84\xc0\xf9\x49\x51\xd8\x83\xb0\x6b\x4c\xa0\x67\x67\xe8\x6c\x9d\x0c\x62\xbc\x8e\x5c\xbf\xca\xef\x07\x10\x03\x88\x40\xdc\x05\x97\x60\xde\x08\xdd\xd0\xf3\xb1\xfc\x19\x88\xb8\xf9\x68\xdc\xf7\x14\x36\x56\xd3\x02\xc4\xa9\x4c\x17\x30\x3f\x2e\x5b\xff\xd6\xe0\x31\xf9\x76\xbc\x8b\xbf\x52\x62\xbe\x00\x21\x58\x99\x58\xe0\xb4\xb7\xd9\x83\x32\x31\x61\x09\x59\xab\x2d\x05\x59\x20\xa2\x0c\xad\xfe\x55\xed\xb2\xe5\x62\x74\xc6\x1d\x4d\x59\xa0\xec\xfb\x6c\x22\xbd\xeb\x64\x8c\x18\xd2\xcf\xda\x52\x5d\xc6\x02\x6b\x6f\xb2\xab\xf1\xfc\x6f\x90\x41\xa4\xe1\x17\x18\x37\x7a\x91\xf4\xdb\xdb\xdc\x4f\xa6\xf3\xbe\xb0\xa3\x6c\x9f\xeb\x06\xe3\x38\x0e\xa6\x01\x13\x8f\x3d\x1a\x3b\x71\x4f\x52\x37\x35\x77\xf8\xb2\x9b\xb6\xa6\x86\x1c\xab\xe4\x9f\x9e\xf7\x67\x2f\xef\x32\x04\x1f\xee\x28\xb6\xde\x45\xda\x23\x31\xda\xd3\xdd\x3a\x83\x8f\xe9\xab\x58\x48\x4a\x36\xf9\xf8\xb6\xc1\xee\xa3\x0d\x3e\x00\x9c\x51\x08\x38\xa6\x7d\xb4\x81\x87\xb5\xdf\x97\xf0\x8b\xc8\x24\xf1\x68\x28\x12\x74\x36\x1e\x67\xf3\x49\xa7\x3f\x01\x00\x00\xff\xff\x79\xc2\xc0\xa5\x6d\x06\x00\x00")

func templatesHandler_rpc_goTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHandler_rpc_goTpl,
		"templates/handler_rpc_go.tpl",
	)
}

func templatesHandler_rpc_goTpl() (*asset, error) {
	bytes, err := templatesHandler_rpc_goTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/handler_rpc_go.tpl", size: 1645, mode: os.FileMode(420), modTime: time.Unix(1543448395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesService_goTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x6e\xdb\x30\x0c\x3d\x4b\x5f\x41\xf8\x30\xd8\x43\x62\xdf\x0d\xf4\xb4\x35\xc7\x2e\xd8\xfa\x03\xac\x42\xab\x42\x65\xc9\x90\xe4\x2e\x81\xa0\x7f\x1f\xe4\x38\x69\x83\x26\x73\xb1\x5d\x12\x89\x7a\xa4\xf8\x1e\x9f\x3c\xa0\x78\x41\x49\x10\x63\xbd\x3d\x2e\x1f\xb0\xa7\x94\x38\x57\xfd\x60\x5d\x80\x92\x33\x81\xe2\x99\xa0\x90\x2a\x3c\x8f\x4f\xb5\xb0\x7d\x33\x60\x70\x4a\xbc\xf4\xa6\x91\x76\x3d\x1d\x17\x9c\xb3\xa7\x51\x7a\x83\xf2\x02\x39\xc7\x4e\xff\x6b\x69\x0b\xce\xb4\xbd\x04\x79\xe5\xc6\xc1\x93\x69\xb4\x95\x6e\xf4\xb9\xd6\xfb\x63\xf4\xc1\xa1\xa1\xd0\x48\xd4\xb8\x3f\x34\x3d\xe5\xdb\x7d\xc1\x2b\xce\x9b\x46\xda\x56\x92\x21\x87\x81\xe0\x08\x00\xda\x0f\xd6\x13\xac\x0f\xb0\xde\x5e\x61\x16\x0e\xc3\x44\x78\x43\x18\x46\x47\x5b\x47\x9d\xda\xa7\xf4\x8b\xdc\xab\x12\x04\xca\x04\x72\x1d\x0a\x82\xc8\x63\x54\x1d\xd4\xf7\x7b\xec\x07\x4d\x9b\xd1\x88\xb9\x06\x8b\xf1\x63\xb4\xac\x80\x9c\xb3\x8e\xc7\x48\x66\x97\x12\x5f\xbc\xeb\xc7\x10\x94\x35\x1e\x7c\x70\xa3\x08\x10\x73\x46\x37\x1a\x01\xe2\x99\xc4\xcb\x52\x5a\x69\x87\x00\x5f\x97\x50\xd5\x32\x04\x22\x67\xaa\x83\x5c\xee\xee\x0e\x8c\xd2\x39\xc0\xa6\x2d\x7c\x59\x4a\x8e\x89\xb3\xc4\x99\xa3\x30\x3a\x93\x6b\x9c\x49\x3c\xd0\xef\x9b\xc9\x65\x96\x30\x6b\xfb\x93\x06\x7b\x6f\xf0\x49\xd3\x2e\x25\x47\x83\xbd\xa2\xd6\x77\x0c\x98\x71\xab\x93\xb0\xec\x53\xcc\x57\xbc\xfa\xcb\x98\xe3\xb9\xe7\x4c\x71\x8e\x6e\x9d\x7a\xc5\x30\x3b\x65\x16\xa1\xfd\xfc\x34\xaa\x15\x67\x2c\xa0\xf4\x2d\xcc\x26\xad\x1f\x51\xfa\x5c\x88\x15\x1a\x0f\xe4\x8a\x16\x00\x0a\x7f\xcc\x2c\x56\xd3\xc1\x69\xd7\x42\xf1\xd6\xc9\xb1\x85\x09\x91\xf2\x4f\xa7\x48\xef\x7c\x0b\xda\xca\x7a\x33\xad\xff\xb7\x2a\xe7\xec\xd6\x0c\x5a\x70\x17\x72\x5f\x58\xf9\x9a\x54\x6f\x0e\xfe\x87\xb1\x9e\xaf\xc9\xca\x5d\x08\xc7\x67\xda\xef\x58\x1f\x67\xbf\x3c\xfc\xdc\xf1\xad\xd7\x3b\xb9\xb3\xf4\x53\x91\x6b\x6c\x26\xdb\xdc\x7c\xde\x99\xe4\xa9\xc9\xdc\xbe\x0b\x19\xf3\x0d\xb5\x2e\x7d\x9d\x29\x54\x9c\xf9\x80\xc1\x6f\x0c\xb4\x77\xf0\x11\xfa\xa8\x7a\x65\xe4\x1b\x78\x47\x1d\x39\x98\x53\xca\x8a\x9f\x8d\x69\x94\xe6\xe9\xf4\x35\xf9\x13\x00\x00\xff\xff\x03\x29\xe4\xd2\xaa\x05\x00\x00")

func templatesService_goTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesService_goTpl,
		"templates/service_go.tpl",
	)
}

func templatesService_goTpl() (*asset, error) {
	bytes, err := templatesService_goTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/service_go.tpl", size: 1450, mode: os.FileMode(420), modTime: time.Unix(1543443670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client_rpc_go.tpl": templatesClient_rpc_goTpl,
	"templates/data_go.tpl": templatesData_goTpl,
	"templates/handler_go.tpl": templatesHandler_goTpl,
	"templates/handler_rpc_go.tpl": templatesHandler_rpc_goTpl,
	"templates/service_go.tpl": templatesService_goTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client_rpc_go.tpl": &bintree{templatesClient_rpc_goTpl, map[string]*bintree{}},
		"data_go.tpl": &bintree{templatesData_goTpl, map[string]*bintree{}},
		"handler_go.tpl": &bintree{templatesHandler_goTpl, map[string]*bintree{}},
		"handler_rpc_go.tpl": &bintree{templatesHandler_rpc_goTpl, map[string]*bintree{}},
		"service_go.tpl": &bintree{templatesService_goTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

