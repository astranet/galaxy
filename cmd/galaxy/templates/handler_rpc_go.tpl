// Code generated by galaxy. DO NOT EDIT.
// All changes must be done in custom client that should either embed or wrap this.

package {{.PackageName}}

import (
	"encoding/json"
	"net/http"

	bugsnag "github.com/bugsnag/bugsnag-go"
	log "github.com/sirupsen/logrus"

	"github.com/astranet/galaxy/logging"
	"github.com/astranet/galaxy/metrics"
)

type {{.FeaturePrefix}}RPCHandler interface {
{{.RPCHandlerInterfaceBody}}
}

var {{.FeaturePrefix}}RPCHandlerSpec {{.FeaturePrefix}}RPCHandler = &{{.RPCHandlerPrivateName}}{}

type {{.FeaturePrefix}}RPCHandlerOptions struct {
}

func check{{.FeaturePrefix}}RPCHandlerOptions(opt *{{.FeaturePrefix}}RPCHandlerOptions) *{{.FeaturePrefix}}RPCHandlerOptions {
	if opt == nil {
		opt = &{{.FeaturePrefix}}RPCHandlerOptions{}
	}
	return opt
}

func New{{.FeaturePrefix}}RPCHandler(
	svc {{.FeaturePrefix}}Service,
	opt *{{.FeaturePrefix}}RPCHandlerOptions,
) {{.FeaturePrefix}}RPCHandler {
	return &{{.RPCHandlerPrivateName}}{
		opt: check{{.FeaturePrefix}}RPCHandlerOptions(opt),
		tags: metrics.Tags{
			"layer":   "rpc_handler",
			"service": "{{.ServiceName}}",
		},
		fields: log.Fields{
			"layer":   "rpc_handler",
			"service": "{{.ServiceName}}",
		},

		svc: svc,
	}
}

type {{.RPCHandlerPrivateName}} struct {
	svc  {{.FeaturePrefix}}Service
	tags metrics.Tags
	fields log.Fields
	opt  *{{.FeaturePrefix}}RPCHandlerOptions
}

{{.RPCHandlerImplementationBody}}

type {{.FeaturePrefix}}ErrorResponse struct {
	Error string `json:"error"`
}

func new{{.FeaturePrefix}}ErrorResponse(err error) {{.FeaturePrefix}}ErrorResponse {
	return {{.FeaturePrefix}}ErrorResponse{
		Error: err.Error(),
	}
}
